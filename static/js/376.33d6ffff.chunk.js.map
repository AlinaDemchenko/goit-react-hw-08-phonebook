{"version":3,"file":"static/js/376.33d6ffff.chunk.js","mappings":"wKAuBA,IAnBA,WACE,OACEA,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CACbC,SAAS,YACTC,UAAW,KACXC,iBAAe,EACfC,aAAW,EACXC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAW,EACXC,cAAc,EACdC,MAAM,UACNC,WAAYC,EAAAA,GACZC,MAAO,CAAEC,QAAS,QAGxB,C,+FCnBaC,EAAaC,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qd,iDCgDrC,EA5Ca,WACX,IAAMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAWC,EAAAA,EAAAA,MAoBjB,OACEC,EAAAA,EAAAA,MAACT,EAAU,CAACU,SAnBO,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAa,CACjBC,KAAMH,EAAII,cAAcD,KAAKE,MAC7BC,OAAQN,EAAII,cAAcE,OAAOD,OAEZZ,EAAMc,MAC3B,SAAAC,GAAO,OAAIN,EAAWC,OAASK,EAAQL,IAAI,IAG3CM,EAAAA,GAAAA,KAAW,GAADC,OAAIR,EAAWC,KAAI,iCAG7BP,GAASe,EAAAA,EAAAA,IAAgBT,GAG7B,EAGqCU,SAAA,EACjCvC,EAAAA,EAAAA,KAAA,SACEwC,UAAU,OACVC,KAAK,OACLX,KAAK,OACLY,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,KAEV5C,EAAAA,EAAAA,KAAA,SACEyC,KAAK,MACLX,KAAK,SACLY,QAAQ,iGACRC,MAAM,+FACNC,UAAQ,KAEV5C,EAAAA,EAAAA,KAAA,UAAQyC,KAAK,SAAQF,SAAC,kBAG5B,EC9CaM,EAAuB5B,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iTCY9C,EAXuB,SAAjB2B,IACJ,OACE9C,EAAAA,EAAAA,KAAC6C,EAAoB,CAAAN,UACnBd,EAAAA,EAAAA,MAAA,OAAAc,SAAA,EACEvC,EAAAA,EAAAA,KAAC+C,EAAI,KACL/C,EAAAA,EAAAA,KAAC8C,EAAc,QAIvB,E,oBCMA,EAZiB,WACf,IAAME,GAAY3B,EAAAA,EAAAA,IAAY4B,EAAAA,IAE9B,OACExB,EAAAA,EAAAA,MAAA,QAAAc,SAAA,EACEvC,EAAAA,EAAAA,KAAC8C,EAAc,IACdE,IAAahD,EAAAA,EAAAA,KAACkD,EAAAA,EAAM,KACrBlD,EAAAA,EAAAA,KAACmD,EAAAA,EAAY,MAGnB,C,8FCda7B,EAAiB,SAAA8B,GAAK,OAAIA,EAAMC,SAASjC,KAAM,EAC/C6B,EAAgB,SAAAG,GAAK,OAAIA,EAAMC,SAASL,SAAU,GAIzBM,EAAAA,EAAAA,IACpC,CAAChC,EAHyB,SAAA8B,GAAK,OAAIA,EAAMG,MAAO,IAIhD,SAACF,EAAUE,GACT,OAAOF,EAASE,QAAO,SAAApB,GAAO,OAC5BA,EAAQL,KAAK0B,cAAcC,SAASF,EAAOC,cAAcE,OAAO,GAEpE,G","sources":["components/Notification/Notification.jsx","components/Form/Form.styled.js","components/Form/Form.jsx","components/ContactsLayout/ContactsLayout.styled.js","components/ContactsLayout/ContactsLayout.jsx","pages/Contacts.jsx","redux/selectors.js"],"sourcesContent":["import { ToastContainer } from 'react-toastify';\nimport { Zoom } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction Notification() {\n  return (\n    <ToastContainer\n      position=\"top-right\"\n      autoClose={2500}\n      hideProgressBar\n      newestOnTop\n      closeOnClick\n      rtl={false}\n      pauseOnFocusLoss\n      draggable={false}\n      pauseOnHover={false}\n      theme=\"colored\"\n      transition={Zoom}\n      style={{ opacity: '0.8' }}\n    />\n  );\n}\n\nexport default Notification;\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\nwidth: 100%;\ndisplay: flex;\n\n  input {\n    width: 30%;\n    padding: 0 5px;\n    /* outline-color: #3f6e93; */\n    /* border: 1px solid black; */\n    border: none;\n    margin-right: 20px;\n    border-radius: 5px;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 6px 14px 0px;\n  }\n\n  button {\n    height: 26px;\n    width: 90px;\n    cursor: pointer;\n    background-color: #3f6e93;\n    color: white;\n    border: none;\n    border-radius: 5px;\n  }\n`;\n","import { StyledForm } from './Form.styled';\nimport { toast } from 'react-toastify';\nimport { addContactThunk } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst Form = () => {\n  const items = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const newContact = {\n      name: evt.currentTarget.name.value,\n      number: evt.currentTarget.number.value,\n    };\n    const checkedContact = items.find(\n      contact => newContact.name === contact.name\n    );\n    if (checkedContact) {\n      toast.info(`${newContact.name} is already in your contacts`);\n      return;\n    } else {\n      dispatch(addContactThunk(newContact));\n    }\n    // evt.currentTarget.reset();\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <input\n        className=\"name\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button type=\"submit\">Add contact</button>\n    </StyledForm>\n  );\n};\n\nexport default Form;\n","import styled from 'styled-components';\n\nexport const StyledContactsLayout = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding-top: 20px;\n\ndiv{\n    width: 80%;\n    height: 80%;\n    padding: 50px;\n    background-color: #fff;\n    border-radius: 30px;\n    margin: 0 20px 0 auto;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n}\n`;\n","import Form from 'components/Form/Form';\nimport { StyledContactsLayout } from './ContactsLayout.styled';\n\nconst ContactsLayout = () => {\n  return (\n    <StyledContactsLayout>\n      <div>\n        <Form/>\n        <ContactsLayout/>\n      </div>\n    </StyledContactsLayout>\n  );\n};\n\nexport default ContactsLayout;\n\n","import ContactsLayout from 'components/ContactsLayout/ContactsLayout';\nimport Loader from 'components/Loader/Loader';\nimport Notification from 'components/Notification/Notification';\nimport { useSelector} from 'react-redux';\nimport { selectLoading } from 'redux/selectors';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectLoading);\n\n  return (\n    <main>\n      <ContactsLayout />\n      {isLoading && <Loader />}\n      <Notification />\n    </main>\n  );\n};\n\nexport default Contacts;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n"],"names":["_jsx","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","transition","Zoom","style","opacity","StyledForm","styled","_templateObject","_taggedTemplateLiteral","items","useSelector","selectContacts","dispatch","useDispatch","_jsxs","onSubmit","evt","preventDefault","newContact","name","currentTarget","value","number","find","contact","toast","concat","addContactThunk","children","className","type","pattern","title","required","StyledContactsLayout","ContactsLayout","Form","isLoading","selectLoading","Loader","Notification","state","contacts","createSelector","filter","toLowerCase","includes","trim"],"sourceRoot":""}